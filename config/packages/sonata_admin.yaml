# This file is part of «Epigraphy of Medieval Rus» database.
#
# Copyright (c) National Research University Higher School of Economics
#
# «Epigraphy of Medieval Rus» database is free software:
# you can redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software Foundation, version 3.
#
# «Epigraphy of Medieval Rus» database is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code. If you have not received
# a copy of the GNU General Public License along with
# «Epigraphy of Medieval Rus» database,
# see <http://www.gnu.org/licenses/>.

sonata_admin:
  title: Древнерусская эпиграфика
  dashboard:
    blocks:
      - { type: sonata.admin.block.admin_list, position: left }
    groups:
      inscriptions:
        label_catalogue: admin
        label: menu.groups.inscriptions.label
        items:
          - admin.inscription
          - admin.alphabet
          - admin.content_category
          - admin.material
          - admin.preservation_state
          - admin.writing_type
          - admin.writing_method
        roles: [ ROLE_ADMIN ]
      carriers:
        label_catalogue: admin
        label: menu.groups.carriers.label
        items:
          - admin.carrier
          - admin.carrier_type
          - admin.carrier_category
        roles: [ ROLE_ADMIN ]
      media:
        label_catalogue: admin
        label: menu.groups.media.label
        items:
          - admin.file
        roles: [ ROLE_ADMIN ]
      security:
        label_catalogue: admin
        label: menu.groups.security.label
        items:
          - admin.user
        roles: [ ROLE_SUPER_ADMIN ]
  options:
    use_icheck: false
  assets:
    extra_javascripts:
      - 'build/js/admin/inscription/edit.js'
    extra_stylesheets:
      - 'build/css/admin/inscription/edit.css'

sonata_block:
  blocks:
    sonata.admin.block.admin_list:
      contexts: [admin]

services:
  admin.carrier:
    class: App\Admin\Epigraphy\CarrierAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\Carrier, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.carrier_type:
    class: App\Admin\Epigraphy\CarrierTypeAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\CarrierType, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.carrier_category:
    class: App\Admin\Epigraphy\CarrierCategoryAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\CarrierCategory, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.alphabet:
    class: App\Admin\Epigraphy\AlphabetAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\Alphabet, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.content_category:
    class: App\Admin\Epigraphy\ContentCategoryAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\ContentCategory, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.material:
    class: App\Admin\Epigraphy\MaterialAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\Material, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.preservation_state:
    class: App\Admin\Epigraphy\PreservationStateAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\PreservationState, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.writing_type:
    class: App\Admin\Epigraphy\WritingTypeAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\WritingType, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.writing_method:
    class: App\Admin\Epigraphy\WritingMethodAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\WritingMethod, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.inscription:
    class: App\Admin\Epigraphy\InscriptionAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\Inscription, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.interpretation:
    class: App\Admin\Epigraphy\InterpretationAdmin
    arguments: [null, App\Persistence\Entity\Epigraphy\Interpretation, null]
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.file:
    class: App\Admin\Media\FileAdmin
    arguments:
      - null
      - App\Persistence\Entity\Media\File
      - null
      - '@App\Persistence\Repository\Epigraphy\FileRepository'
      - '@App\DataStorage\DataStorageManagerInterface'
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }
  admin.user:
    class: App\Admin\Security\UserAdmin
    arguments:
      - null
      - App\Persistence\Entity\Security\User
      - null
      - '@security.password_hasher'
    calls:
      - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.noop']]
    tags:
      - { name: sonata.admin, manager_type: orm }